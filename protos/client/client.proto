syntax = "proto3";

import "common/rustproto.proto";

option (rustproto.carllerche_bytes_for_bytes_all) = true;

message Value {
    oneof value {
        bytes bytes = 1;
        sint64 int = 2;
        ValueArray array = 3;
    }
}

message ValueArray {
    repeated Value values = 1;
}

message Error {
    enum Code {
        INTERNAL = 0;
        BAD_REQUEST = 1;
    }

    Code code = 1;
    string message = 2;
}

message WriteExpressionClear {}

message WriteExpressionSet {
    message Condition {
        oneof condition {
            bool exists = 1;
            uint32 equals = 2;
        }
    }

    uint32 key = 1;
    uint32 value = 2;
    Condition condition = 3;
}

message WriteExpressionSequence {
    repeated WriteExpression exprs = 1;
}

message WriteExpressionDelete {
    uint32 key = 1;
}

message WriteExpression {
    oneof expr {
        WriteExpressionClear clear = 1;
        WriteExpressionSet set = 2;
        WriteExpressionSequence sequence = 3;
        ReadExpression read = 4;
        WriteExpressionDelete delete = 5;
    }
}

message ReadExpressionGet {
    uint32 key = 1;
    uint32 dest = 2;
}

message ReadExpressionSequence {
    repeated ReadExpression exprs = 1;
}

message ReadExpression {
    oneof expr {
        ReadExpressionGet get = 1;
        ReadExpressionSequence sequence = 2;
    }
}

message ReadTransaction {
    repeated Value inputs = 1;
    repeated uint32 outputs = 2;
    ReadExpression expr = 3;
}

message WriteTransaction {
    repeated Value inputs = 1;
    repeated uint32 outputs = 2;
    WriteExpression expr = 3;
}

message ReadRequest {
    ReadTransaction tx = 1;
}

message ReadOutput {
    Value value = 1;
}

message ReadResult {
    repeated ReadOutput outputs = 1;
}

message ReadResponse {
    oneof body {
        Error error = 1;
        ReadResult result = 2;
    }
}

message WriteRequest {
    WriteTransaction tx = 1;
}

message WriteOutput {
    Value value = 1;
}

message WriteResult {
    repeated WriteOutput outputs = 1;
}

message WriteResponse {
    oneof body {
        Error error = 1;
        WriteResult result = 2;
    }
}

service Service {
    rpc read(ReadRequest) returns (ReadResponse);
    rpc write(WriteRequest) returns (WriteResponse);
}
